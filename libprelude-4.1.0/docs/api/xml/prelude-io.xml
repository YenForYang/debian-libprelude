<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="libprelude-prelude-io">
<refmeta>
<refentrytitle role="top_of_page" id="libprelude-prelude-io.top_of_page">prelude-io</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBPRELUDE Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>prelude-io</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsect1 id="libprelude-prelude-io.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-new">prelude_io_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-destroy">prelude_io_destroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-file-io">prelude_io_set_file_io</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-tls-io">prelude_io_set_tls_io</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-sys-io">prelude_io_set_sys_io</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-buffer-io">prelude_io_set_buffer_io</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-fdptr">prelude_io_set_fdptr</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-pending-callback">prelude_io_set_pending_callback</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-read-callback">prelude_io_set_read_callback</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-set-write-callback">prelude_io_set_write_callback</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-close">prelude_io_close</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-read">prelude_io_read</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-read-wait">prelude_io_read_wait</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-read-delimited">prelude_io_read_delimited</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-write">prelude_io_write</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-write-delimited">prelude_io_write_delimited</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-forward">prelude_io_forward</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-get-fd">prelude_io_get_fd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-io-get-fdptr">prelude_io_get_fdptr</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-pending">prelude_io_pending</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-bool-t"><returnvalue>prelude_bool_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-io-is-error-fatal">prelude_io_is_error_fatal</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="libprelude-prelude-io.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="prelude-io-t">prelude_io_t</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="libprelude-prelude-io.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="libprelude-prelude-io.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="prelude-io-new" role="function">
<title>prelude_io_new&#160;()</title>
<indexterm zone="prelude-io-new"><primary>prelude_io_new</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_io_new (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> **ret</parameter>);</programlisting>
<para>Create a new prelude IO object.</para>
<refsect3 id="prelude-io-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>ret</para></entry>
<entry role="parameter_description"><para>Pointer where to store the created <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-new.returns" role="returns">
<title>Returns</title>
<para> 0 on success, or a negative value if an error occur.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-destroy" role="function">
<title>prelude_io_destroy&#160;()</title>
<indexterm zone="prelude-io-destroy"><primary>prelude_io_destroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_destroy (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
<para>Destroy the <parameter>pio</parameter>
 object.</para>
<refsect3 id="prelude-io-destroy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-file-io" role="function">
<title>prelude_io_set_file_io&#160;()</title>
<indexterm zone="prelude-io-set-file-io"><primary>prelude_io_set_file_io</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_file_io (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                        <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *fd</parameter>);</programlisting>
<para>Setup the <parameter>pio</parameter>
 object to work with file I/O function.
The <parameter>pio</parameter>
 object is then associated with <parameter>fd</parameter>
.</para>
<refsect3 id="prelude-io-set-file-io.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>A pointer on the <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>File descriptor identifying a file.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-tls-io" role="function">
<title>prelude_io_set_tls_io&#160;()</title>
<indexterm zone="prelude-io-set-tls-io"><primary>prelude_io_set_tls_io</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_tls_io (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                       <parameter><link linkend="void"><type>void</type></link> *tls</parameter>);</programlisting>
<para>Setup the <parameter>pio</parameter>
 object to work with TLS based I/O function.
The <parameter>pio</parameter>
 object is then associated with <parameter>tls</parameter>
.</para>
<refsect3 id="prelude-io-set-tls-io.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>A pointer on the <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tls</para></entry>
<entry role="parameter_description"><para>Pointer on the TLS structure holding the TLS connection data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-sys-io" role="function">
<title>prelude_io_set_sys_io&#160;()</title>
<indexterm zone="prelude-io-set-sys-io"><primary>prelude_io_set_sys_io</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_sys_io (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                       <parameter><link linkend="int"><type>int</type></link> fd</parameter>);</programlisting>
<para>Setup the <parameter>pio</parameter>
 object to work with system based I/O function.
The <parameter>pio</parameter>
 object is then associated with <parameter>fd</parameter>
.</para>
<refsect3 id="prelude-io-set-sys-io.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>A pointer on the <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>A file descriptor.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-buffer-io" role="function">
<title>prelude_io_set_buffer_io&#160;()</title>
<indexterm zone="prelude-io-set-buffer-io"><primary>prelude_io_set_buffer_io</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_io_set_buffer_io (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-io-set-fdptr" role="function">
<title>prelude_io_set_fdptr&#160;()</title>
<indexterm zone="prelude-io-set-fdptr"><primary>prelude_io_set_fdptr</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_fdptr (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                      <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);</programlisting>
<para>Set an user defined pointer that might be retrieved using
<link linkend="prelude-io-get-fdptr"><function>prelude_io_get_fdptr()</function></link>.</para>
<refsect3 id="prelude-io-set-fdptr.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ptr</para></entry>
<entry role="parameter_description"><para>Pointer to user defined data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-pending-callback" role="function">
<title>prelude_io_set_pending_callback&#160;()</title>
<indexterm zone="prelude-io-set-pending-callback"><primary>prelude_io_set_pending_callback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_pending_callback (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                                 <parameter><link linkend="ssize-t"><type>ssize_t</type></link> (*pending) (prelude_io_t *io)</parameter>);</programlisting>
<para>Set an user defined read callback function to be called on
<link linkend="prelude-io-pending"><function>prelude_io_pending()</function></link>.</para>
<refsect3 id="prelude-io-set-pending-callback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>pending</para></entry>
<entry role="parameter_description"><para>Callback function to be called on <link linkend="prelude-io-pending"><function>prelude_io_pending()</function></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-read-callback" role="function">
<title>prelude_io_set_read_callback&#160;()</title>
<indexterm zone="prelude-io-set-read-callback"><primary>prelude_io_set_read_callback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_read_callback (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                              <parameter><link linkend="ssize-t"><type>ssize_t</type></link> (*read) (prelude_io_t *io, void *buf, size_t count)</parameter>);</programlisting>
<para>Set an user defined read callback function to be called on
<link linkend="prelude-io-read"><function>prelude_io_read()</function></link>.</para>
<refsect3 id="prelude-io-set-read-callback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>read</para></entry>
<entry role="parameter_description"><para>Callback function to be called on <link linkend="prelude-io-read"><function>prelude_io_read()</function></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-set-write-callback" role="function">
<title>prelude_io_set_write_callback&#160;()</title>
<indexterm zone="prelude-io-set-write-callback"><primary>prelude_io_set_write_callback</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_io_set_write_callback (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                               <parameter><link linkend="ssize-t"><type>ssize_t</type></link> (*write) (prelude_io_t *io, const void *buf, size_t count)</parameter>);</programlisting>
<para>Set an user defined write callback function to be called on
<link linkend="prelude-io-write"><function>prelude_io_write()</function></link>.</para>
<refsect3 id="prelude-io-set-write-callback.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>write</para></entry>
<entry role="parameter_description"><para>Callback function to be called on <link linkend="prelude-io-write"><function>prelude_io_write()</function></link>.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-io-close" role="function">
<title>prelude_io_close&#160;()</title>
<indexterm zone="prelude-io-close"><primary>prelude_io_close</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_io_close (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
<para>prelude_io_close() closes the file descriptor indentified by <parameter>pio</parameter>
,</para>
<para>The case where the <link linkend="close"><function>close()</function></link> function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<para>However, and especially when the underlaying layer is TLS, <link linkend="prelude-io-close"><function>prelude_io_close()</function></link>
might return error. If this happen, you should continue calling the function
until it return zero.</para>
<refsect3 id="prelude-io-close.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-close.returns" role="returns">
<title>Returns</title>
<para> zero on success, or -1 if an error occurred.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-read" role="function">
<title>prelude_io_read&#160;()</title>
<indexterm zone="prelude-io-read"><primary>prelude_io_read</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_read (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                 <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                 <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>prelude_io_read() attempts to read up to <parameter>count</parameter>
 bytes from the
file descriptor identified by <parameter>pio</parameter>
 into the buffer starting at <parameter>buf</parameter>
.</para>
<para>If <parameter>count</parameter>
 is zero, <link linkend="prelude-io-read"><function>prelude_io_read()</function></link> returns zero and has no other
results. If <parameter>count</parameter>
 is greater than SSIZE_MAX, the result is unspecified.</para>
<para>The case where the read function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<refsect3 id="prelude-io-read.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>Pointer to the buffer to store data into.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>count</para></entry>
<entry role="parameter_description"><para>Number of bytes to read.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-read.returns" role="returns">
<title>Returns</title>
<para> On success, the number of bytes read is returned (zero
indicates end of file). It is not an error if this number is smaller
than the number of bytes requested; this may happen for example because
fewer bytes are actually available right now or because <link linkend="read"><function>read()</function></link> was
interrupted by a signal.</para>
<para>On error, a negative value is returned. In this case it is left unspecified
whether the file position (if any) changes.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-read-wait" role="function">
<title>prelude_io_read_wait&#160;()</title>
<indexterm zone="prelude-io-read-wait"><primary>prelude_io_read_wait</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_read_wait (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                      <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                      <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>prelude_io_read_wait() attempts to read up to <parameter>count</parameter>
 bytes from the
file descriptor identified by <parameter>pio</parameter>
 into the buffer starting at <parameter>buf</parameter>
.</para>
<para>If <parameter>count</parameter>
 is zero, <link linkend="prelude-io-read"><function>prelude_io_read()</function></link> returns zero and has no other
results. If <parameter>count</parameter>
 is greater than SSIZE_MAX, the result is unspecified.</para>
<para>The case where the read function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<para>prelude_io_read_wait() always return the number of bytes requested.
Be carefull that this function is blocking.</para>
<refsect3 id="prelude-io-read-wait.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>Pointer to the buffer to store data into.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>count</para></entry>
<entry role="parameter_description"><para>Number of bytes to read.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-read-wait.returns" role="returns">
<title>Returns</title>
<para> On success, the number of bytes read is returned (zero
indicates end of file).</para>
<para>On error, -1 is returned, and errno is set appropriately. In this
case it is left unspecified whether the file position (if any) changes.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-read-delimited" role="function">
<title>prelude_io_read_delimited&#160;()</title>
<indexterm zone="prelude-io-read-delimited"><primary>prelude_io_read_delimited</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_read_delimited (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                           <parameter>unsigned <link linkend="char"><type>char</type></link> **buf</parameter>);</programlisting>
<para>prelude_io_read_delimited() read message written by <link linkend="prelude-write-delimited"><function>prelude_write_delimited()</function></link>.
Theses messages are sents along with the len of the message.</para>
<para>Uppon return the <parameter>buf</parameter>
 argument is updated to point on a newly allocated
buffer containing the data read. The <parameter>count</parameter>
 argument is set to the number of
bytes the message was containing.</para>
<para>The case where the read function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<refsect3 id="prelude-io-read-delimited.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>Pointer to the address of a buffer to store address of data into.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-read-delimited.returns" role="returns">
<title>Returns</title>
<para> On success, the number of bytes read is returned (zero
indicates end of file).</para>
<para>On error, -1 is returned, and errno is set appropriately. In this
case it is left unspecified whether the file position (if any) changes.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-write" role="function">
<title>prelude_io_write&#160;()</title>
<indexterm zone="prelude-io-write"><primary>prelude_io_write</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_write (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                  <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                  <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>prelude_io_write() writes up to <parameter>count</parameter>
 bytes to the file descriptor
identified by <parameter>pio</parameter>
 from the buffer starting at <parameter>buf</parameter>
. POSIX requires
that a <link linkend="read"><function>read()</function></link> which can be proved to occur after a <link linkend="write"><function>write()</function></link> has returned
returns the new data. Note that not all file systems are POSIX conforming.</para>
<para>The case where the <link linkend="write"><function>write()</function></link> function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<refsect3 id="prelude-io-write.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>Pointer to the buffer to write data from.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>count</para></entry>
<entry role="parameter_description"><para>Number of bytes to write.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-write.returns" role="returns">
<title>Returns</title>
<para> On success, the number of bytes written are returned (zero
indicates nothing was written). On error, -1 is returned, and errno
is set appropriately. If <parameter>count</parameter>
is zero and the file descriptor refers
to a regular file, 0 will be returned without causing any other effect.
For a special file, the results are not portable.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-write-delimited" role="function">
<title>prelude_io_write_delimited&#160;()</title>
<indexterm zone="prelude-io-write-delimited"><primary>prelude_io_write_delimited</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_write_delimited (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                            <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                            <parameter><link linkend="uint16-t"><type>uint16_t</type></link> count</parameter>);</programlisting>
<para>prelude_io_write_delimited() writes up to <parameter>count</parameter>
 bytes to the file descriptor
identified by <parameter>pio</parameter>
 from the buffer starting at <parameter>buf</parameter>
. POSIX requires
that a <link linkend="read"><function>read()</function></link> which can be proved to occur after a <link linkend="write"><function>write()</function></link> has returned
returns the new data. Note that not all file systems are POSIX conforming.</para>
<para>prelude_io_write_delimited() also write the len of the data to be sent.
which allow <link linkend="prelude-io-read-delimited"><function>prelude_io_read_delimited()</function></link> to safely know if it got all the
data a given write contain.</para>
<para>The case where the <link linkend="write"><function>write()</function></link> function would be interrupted by a signal is
handled internally. So you don't have to check for EINTR.</para>
<refsect3 id="prelude-io-write-delimited.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>Pointer to the buffer to write data from.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>count</para></entry>
<entry role="parameter_description"><para>Number of bytes to write.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-write-delimited.returns" role="returns">
<title>Returns</title>
<para> On success, the number of bytes written are returned (zero
indicates nothing was written). On error, -1 is returned, and errno
is set appropriately.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-forward" role="function">
<title>prelude_io_forward&#160;()</title>
<indexterm zone="prelude-io-forward"><primary>prelude_io_forward</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_forward (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *dst</parameter>,
                    <parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *src</parameter>,
                    <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>prelude_io_forward() attempts to transfer up to <parameter>count</parameter>
 bytes from
the file descriptor identified by <parameter>src</parameter>
 into the file descriptor
identified by <parameter>dst</parameter>
.</para>
<refsect3 id="prelude-io-forward.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dst</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>count</para></entry>
<entry role="parameter_description"><para>Number of byte to forward from <parameter>src</parameter>
to <parameter>dst</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-forward.returns" role="returns">
<title>Returns</title>
<para> If the transfer was successful, the number of bytes written
to <parameter>dst</parameter>
is returned.  On error, -1 is returned, and errno is set appropriately.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-get-fd" role="function">
<title>prelude_io_get_fd&#160;()</title>
<indexterm zone="prelude-io-get-fd"><primary>prelude_io_get_fd</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_io_get_fd (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
<refsect3 id="prelude-io-get-fd.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>A pointer on a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-get-fd.returns" role="returns">
<title>Returns</title>
<para> The FD associated with this object.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-get-fdptr" role="function">
<title>prelude_io_get_fdptr&#160;()</title>
<indexterm zone="prelude-io-get-fdptr"><primary>prelude_io_get_fdptr</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
prelude_io_get_fdptr (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
<refsect3 id="prelude-io-get-fdptr.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>A pointer on a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-get-fdptr.returns" role="returns">
<title>Returns</title>
<para> Pointer associated with this object (file, tls, buffer, or NULL).</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-pending" role="function">
<title>prelude_io_pending&#160;()</title>
<indexterm zone="prelude-io-pending"><primary>prelude_io_pending</primary></indexterm>
<programlisting language="C"><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>
prelude_io_pending (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>);</programlisting>
<para>prelude_io_pending return the number of bytes waiting to
be read on an TLS or socket fd.</para>
<refsect3 id="prelude-io-pending.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-pending.returns" role="returns">
<title>Returns</title>
<para> Number of byte waiting to be read on <parameter>pio</parameter>
, or -1
if <parameter>pio</parameter>
is not of type TLS or socket.</para>
</refsect3></refsect2>
<refsect2 id="prelude-io-is-error-fatal" role="function">
<title>prelude_io_is_error_fatal&#160;()</title>
<indexterm zone="prelude-io-is-error-fatal"><primary>prelude_io_is_error_fatal</primary></indexterm>
<programlisting language="C"><link linkend="prelude-bool-t"><returnvalue>prelude_bool_t</returnvalue></link>
prelude_io_is_error_fatal (<parameter><link linkend="prelude-io-t"><type>prelude_io_t</type></link> *pio</parameter>,
                           <parameter><link linkend="int"><type>int</type></link> error</parameter>);</programlisting>
<para>Check whether the returned error is fatal, or not.</para>
<refsect3 id="prelude-io-is-error-fatal.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pio</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-io-t"><type>prelude_io_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>error</para></entry>
<entry role="parameter_description"><para>Error returned by one of the <link linkend="prelude-io-t"><type>prelude_io_t</type></link> function.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-io-is-error-fatal.returns" role="returns">
<title>Returns</title>
<para> TRUE if error is fatal, FALSE if it is not.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="libprelude-prelude-io.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="prelude-io-t" role="typedef">
<title>prelude_io_t</title>
<indexterm zone="prelude-io-t"><primary>prelude_io_t</primary></indexterm>
<programlisting language="C">typedef struct prelude_io prelude_io_t;
</programlisting>
</refsect2>

</refsect1>

</refentry>
