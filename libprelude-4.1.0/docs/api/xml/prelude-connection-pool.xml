<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="libprelude-prelude-connection-pool">
<refmeta>
<refentrytitle role="top_of_page" id="libprelude-prelude-connection-pool.top_of_page">prelude-connection-pool</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBPRELUDE Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>prelude-connection-pool</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsect1 id="libprelude-prelude-connection-pool.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-broadcast">prelude_connection_pool_broadcast</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-broadcast-async">prelude_connection_pool_broadcast_async</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-init">prelude_connection_pool_init</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-new">prelude_connection_pool_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-connection-pool-t"><returnvalue>prelude_connection_pool_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-connection-pool-ref">prelude_connection_pool_ref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-list-t"><returnvalue>prelude_list_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-connection-pool-get-connection-list">prelude_connection_pool_get_connection_list</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-add-connection">prelude_connection_pool_add_connection</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-del-connection">prelude_connection_pool_del_connection</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-connection-dead">prelude_connection_pool_set_connection_dead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-connection-alive">prelude_connection_pool_set_connection_alive</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-connection-string">prelude_connection_pool_set_connection_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-connection-pool-get-connection-string">prelude_connection_pool_get_connection_string</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-destroy">prelude_connection_pool_destroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-connection-pool-flags-t"><returnvalue>prelude_connection_pool_flags_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-get-flags">prelude_connection_pool_get_flags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-flags">prelude_connection_pool_set_flags</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-required-permission">prelude_connection_pool_set_required_permission</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-data">prelude_connection_pool_set_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-connection-pool-get-data">prelude_connection_pool_get_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-recv">prelude_connection_pool_recv</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-check-event">prelude_connection_pool_check_event</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-global-event-handler">prelude_connection_pool_set_global_event_handler</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-connection-pool-set-event-handler">prelude_connection_pool_set_event_handler</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="libprelude-prelude-connection-pool.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="prelude-connection-pool-flags-t">prelude_connection_pool_flags_t</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="prelude-connection-pool-event-t">prelude_connection_pool_event_t</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="prelude-connection-pool-t">prelude_connection_pool_t</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="libprelude-prelude-connection-pool.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="libprelude-prelude-connection-pool.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="prelude-connection-pool-broadcast" role="function">
<title>prelude_connection_pool_broadcast&#160;()</title>
<indexterm zone="prelude-connection-pool-broadcast"><primary>prelude_connection_pool_broadcast</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_broadcast (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                   <parameter><link linkend="prelude-msg-t"><type>prelude_msg_t</type></link> *msg</parameter>);</programlisting>
<para>Sends the message contained in <parameter>msg</parameter>
 to all the connection in <parameter>pool</parameter>
.</para>
<refsect3 id="prelude-connection-pool-broadcast.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>msg</para></entry>
<entry role="parameter_description"><para>Pointer on a <link linkend="prelude-msg-t"><type>prelude_msg_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-broadcast-async" role="function">
<title>prelude_connection_pool_broadcast_async&#160;()</title>
<indexterm zone="prelude-connection-pool-broadcast-async"><primary>prelude_connection_pool_broadcast_async</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_broadcast_async
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-msg-t"><type>prelude_msg_t</type></link> *msg</parameter>);</programlisting>
<para>Sends the message contained in <parameter>msg</parameter>
 to all connections
in <parameter>pool</parameter>
 asynchronously. After the request is processed,
the <parameter>msg</parameter>
 message will be freed.</para>
<refsect3 id="prelude-connection-pool-broadcast-async.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>msg</para></entry>
<entry role="parameter_description"><para>Pointer on a <link linkend="prelude-msg-t"><type>prelude_msg_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-init" role="function">
<title>prelude_connection_pool_init&#160;()</title>
<indexterm zone="prelude-connection-pool-init"><primary>prelude_connection_pool_init</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_init (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<para>Initializes <parameter>pool</parameter>
. This means that connection associated with <parameter>pool</parameter>

using <link linkend="prelude-connection-pool-set-connection-string"><function>prelude_connection_pool_set_connection_string()</function></link> will be
established.</para>
<refsect3 id="prelude-connection-pool-init.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-init.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value on error.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-new" role="function">
<title>prelude_connection_pool_new&#160;()</title>
<indexterm zone="prelude-connection-pool-new"><primary>prelude_connection_pool_new</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_new (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> **ret</parameter>,
                             <parameter><link linkend="prelude-client-profile-t"><type>prelude_client_profile_t</type></link> *cp</parameter>,
                             <parameter><link linkend="prelude-connection-permission-t"><type>prelude_connection_permission_t</type></link> permission</parameter>);</programlisting>
<para>prelude_connection_pool_new() initializes a new Connection Manager object.</para>
<refsect3 id="prelude-connection-pool-new.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>ret</para></entry>
<entry role="parameter_description"><para>Pointer to an address where to store the created <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cp</para></entry>
<entry role="parameter_description"><para>The <link linkend="prelude-client-profile-t"><type>prelude_client_profile_t</type></link> to use for connection.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>permission</para></entry>
<entry role="parameter_description"><para>Permission the connection in this connection-pool will require.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-new.returns" role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-ref" role="function">
<title>prelude_connection_pool_ref&#160;()</title>
<indexterm zone="prelude-connection-pool-ref"><primary>prelude_connection_pool_ref</primary></indexterm>
<programlisting language="C"><link linkend="prelude-connection-pool-t"><returnvalue>prelude_connection_pool_t</returnvalue></link>&#160;*
prelude_connection_pool_ref (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<para>Increases <parameter>pool</parameter>
 reference count.</para>
<para>prelude_connection_pool_destroy() will decrease the refcount until
it reaches 0, at which point the <parameter>pool</parameter>
 will be destroyed.</para>
<refsect3 id="prelude-connection-pool-ref.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-ref.returns" role="returns">
<title>Returns</title>
<para> The provided <parameter>pool</parameter>
is returned.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-get-connection-list" role="function">
<title>prelude_connection_pool_get_connection_list&#160;()</title>
<indexterm zone="prelude-connection-pool-get-connection-list"><primary>prelude_connection_pool_get_connection_list</primary></indexterm>
<programlisting language="C"><link linkend="prelude-list-t"><returnvalue>prelude_list_t</returnvalue></link>&#160;*
prelude_connection_pool_get_connection_list
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<refsect3 id="prelude-connection-pool-get-connection-list.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-get-connection-list.returns" role="returns">
<title>Returns</title>
<para> The list of connections handled by <parameter>pool</parameter>
.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-add-connection" role="function">
<title>prelude_connection_pool_add_connection&#160;()</title>
<indexterm zone="prelude-connection-pool-add-connection"><primary>prelude_connection_pool_add_connection</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_add_connection
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> *cnx</parameter>);</programlisting>
<para>Adds <parameter>cnx</parameter>
 to <parameter>pool</parameter>
 set of connections.</para>
<para>If <parameter>pool</parameter>
 is already initialized (<link linkend="prelude-connection-pool-init"><function>prelude_connection_pool_init()</function></link> called)
and <parameter>cnx</parameter>
 is not alive, it will attempt a reconnection.</para>
<refsect3 id="prelude-connection-pool-add-connection.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cnx</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> object to add to <parameter>pool</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-add-connection.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-del-connection" role="function">
<title>prelude_connection_pool_del_connection&#160;()</title>
<indexterm zone="prelude-connection-pool-del-connection"><primary>prelude_connection_pool_del_connection</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_del_connection
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> *cnx</parameter>);</programlisting>
<para>Remove <parameter>cnx</parameter>
 from <parameter>pool</parameter>
 of connections.</para>
<refsect3 id="prelude-connection-pool-del-connection.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cnx</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> object to remove from <parameter>pool</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-del-connection.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-connection-dead" role="function">
<title>prelude_connection_pool_set_connection_dead&#160;()</title>
<indexterm zone="prelude-connection-pool-set-connection-dead"><primary>prelude_connection_pool_set_connection_dead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_set_connection_dead
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> *cnx</parameter>);</programlisting>
<para>Notifies <parameter>pool</parameter>
 that the connection identified by <parameter>cnx</parameter>
 is dead.</para>
<para>Usually, this function should not be used since <parameter>pool</parameter>
 is
self sufficient, and handles connections issues internally. However,
it is sometime useful when the user has several mechanisms using the
connection, and that its own mechanism detects a connection problem
before <parameter>pool</parameter>
 notice.</para>
<refsect3 id="prelude-connection-pool-set-connection-dead.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cnx</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> object used within <parameter>pool</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-set-connection-dead.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-connection-alive" role="function">
<title>prelude_connection_pool_set_connection_alive&#160;()</title>
<indexterm zone="prelude-connection-pool-set-connection-alive"><primary>prelude_connection_pool_set_connection_alive</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_set_connection_alive
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> *cnx</parameter>);</programlisting>
<para>Notifies <parameter>pool</parameter>
 that the connection identified by <parameter>cnx</parameter>
 went back alive.</para>
<para>Usually, this function should not be used since <parameter>pool</parameter>
 is
self sufficient, and handles connection issues internally. However,
it is sometime useful when the user has several mechanisms using the
connection, and that its own mechanism detects a connection problem
before <parameter>pool</parameter>
 notice.</para>
<refsect3 id="prelude-connection-pool-set-connection-alive.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cnx</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> object used within <parameter>pool</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-set-connection-alive.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-connection-string" role="function">
<title>prelude_connection_pool_set_connection_string&#160;()</title>
<indexterm zone="prelude-connection-pool-set-connection-string"><primary>prelude_connection_pool_set_connection_string</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_set_connection_string
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter>const <link linkend="char"><type>char</type></link> *cfgstr</parameter>);</programlisting>
<para>Sets the connection string for <parameter>pool</parameter>
. The connection string should be
in the form of : "address". Special operand like || (OR) and &amp;&amp; (AND),
are also accepted: "address &amp;&amp; address".</para>
<para>Where &amp;&amp; means that alert sent using <parameter>pool</parameter>
 will go to both configured
addresses, and || means that if the left address fails, the right address
will be used.</para>
<para>prelude_connection_pool_init() should be used to initiates the connection.</para>
<refsect3 id="prelude-connection-pool-set-connection-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cfgstr</para></entry>
<entry role="parameter_description"><para>Connection string.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-set-connection-string.returns" role="returns">
<title>Returns</title>
<para> 0 on success, a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-get-connection-string" role="function">
<title>prelude_connection_pool_get_connection_string&#160;()</title>
<indexterm zone="prelude-connection-pool-get-connection-string"><primary>prelude_connection_pool_get_connection_string</primary></indexterm>
<programlisting language="C">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
prelude_connection_pool_get_connection_string
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<para>Used to query the connection string used by <parameter>pool</parameter>
.</para>
<refsect3 id="prelude-connection-pool-get-connection-string.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-get-connection-string.returns" role="returns">
<title>Returns</title>
<para> The connection string.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-destroy" role="function">
<title>prelude_connection_pool_destroy&#160;()</title>
<indexterm zone="prelude-connection-pool-destroy"><primary>prelude_connection_pool_destroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_destroy (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<para>Destroys <parameter>pool</parameter>
 and all connections handled.</para>
<refsect3 id="prelude-connection-pool-destroy.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-get-flags" role="function">
<title>prelude_connection_pool_get_flags&#160;()</title>
<indexterm zone="prelude-connection-pool-get-flags"><primary>prelude_connection_pool_get_flags</primary></indexterm>
<programlisting language="C"><link linkend="prelude-connection-pool-flags-t"><returnvalue>prelude_connection_pool_flags_t</returnvalue></link>
prelude_connection_pool_get_flags (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<refsect3 id="prelude-connection-pool-get-flags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-get-flags.returns" role="returns">
<title>Returns</title>
<para> the <link linkend="prelude-connection-pool-flags-t"><type>prelude_connection_pool_flags_t</type></link> used in <parameter>pool</parameter>
.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-flags" role="function">
<title>prelude_connection_pool_set_flags&#160;()</title>
<indexterm zone="prelude-connection-pool-set-flags"><primary>prelude_connection_pool_set_flags</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_set_flags (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                   <parameter><link linkend="prelude-connection-pool-flags-t"><type>prelude_connection_pool_flags_t</type></link> flags</parameter>);</programlisting>
<para>Sets <parameter>flags</parameter>
 within <parameter>pools</parameter>
.</para>
<refsect3 id="prelude-connection-pool-set-flags.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>Flags to use for <parameter>pool</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-required-permission" role="function">
<title>prelude_connection_pool_set_required_permission&#160;()</title>
<indexterm zone="prelude-connection-pool-set-required-permission"><primary>prelude_connection_pool_set_required_permission</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_set_required_permission
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-permission-t"><type>prelude_connection_permission_t</type></link> req_perm</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-connection-pool-set-data" role="function">
<title>prelude_connection_pool_set_data&#160;()</title>
<indexterm zone="prelude-connection-pool-set-data"><primary>prelude_connection_pool_set_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_set_data (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                  <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>The user might use this function to associate data with <parameter>pool</parameter>
.
The data associated might be retrieved using <link linkend="prelude-connection-pool-get-data"><function>prelude_connection_pool_get_data()</function></link>.</para>
<refsect3 id="prelude-connection-pool-set-data.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>Pointer to user specific data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-get-data" role="function">
<title>prelude_connection_pool_get_data&#160;()</title>
<indexterm zone="prelude-connection-pool-get-data"><primary>prelude_connection_pool_get_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
prelude_connection_pool_get_data (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>);</programlisting>
<para>The user might use this function to query data associated with
<parameter>pool</parameter>
 using <link linkend="prelude-connection-pool-set-data"><function>prelude_connection_pool_set_data()</function></link>.</para>
<refsect3 id="prelude-connection-pool-get-data.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-get-data.returns" role="returns">
<title>Returns</title>
<para> the user data associated to <parameter>pool</parameter>
.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-recv" role="function">
<title>prelude_connection_pool_recv&#160;()</title>
<indexterm zone="prelude-connection-pool-recv"><primary>prelude_connection_pool_recv</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_recv (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                              <parameter><link linkend="int"><type>int</type></link> timeout</parameter>,
                              <parameter><link linkend="prelude-connection-t"><type>prelude_connection_t</type></link> **outcon</parameter>,
                              <parameter><link linkend="prelude-msg-t"><type>prelude_msg_t</type></link> **outmsg</parameter>);</programlisting>
<para>This function queries the set of connections available in <parameter>pool</parameter>
 to see if
events are waiting to be handled. If timeout is zero, then this function
will return immediatly in case there is no event to be handled.</para>
<para>If timeout is -1, this function won't return until an event is available.
Otherwise this function will return if there is no event after the specified
number of second.</para>
<para>If an event is available, it will be read and store the <link linkend="prelude-connection-t"><type>prelude_connection_t</type></link>
object in the <parameter>outcon</parameter>
 pointer. If <parameter>outmsg</parameter>
 was specified, the message will be
read and stored in there.</para>
<refsect3 id="prelude-connection-pool-recv.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>timeout</para></entry>
<entry role="parameter_description"><para>Time to wait for an event.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>outcon</para></entry>
<entry role="parameter_description"><para>Pointer where the connection where an event happened should be stored.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>outmsg</para></entry>
<entry role="parameter_description"><para>Pointer where the next message that will be read should be stored.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-recv.returns" role="returns">
<title>Returns</title>
<para> The number of handled events (0 or 1) or a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-check-event" role="function">
<title>prelude_connection_pool_check_event&#160;()</title>
<indexterm zone="prelude-connection-pool-check-event"><primary>prelude_connection_pool_check_event</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_connection_pool_check_event (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> timeout</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> (*event_cb) (prelude_connection_pool_t *pool, prelude_connection_pool_event_t event, prelude_connection_t *cnx, void *extra)</parameter>,
                                     <parameter><link linkend="void"><type>void</type></link> *extra</parameter>);</programlisting>
<para>This function queries the set of connections available in <parameter>pool</parameter>
 to see if
events are waiting to be handled. If timeout is zero, then this function
will return immediatly in case there is no event to be handled.</para>
<para>If timeout is -1, this function won't return until an event is available.
Otherwise this function will return if there is no event after the specified
number of second.</para>
<para>For each event, <parameter>event_cb</parameter>
 is called with the concerned <parameter>pool</parameter>
, the provided
<parameter>extra</parameter>
 data, and the <parameter>cnx</parameter>
 where an event has occured.</para>
<refsect3 id="prelude-connection-pool-check-event.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>timeout</para></entry>
<entry role="parameter_description"><para>Time to wait for an event.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>event_cb</para></entry>
<entry role="parameter_description"><para>User provided callback function to call on received events.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>extra</para></entry>
<entry role="parameter_description"><para>Pointer to user specific data provided to <parameter>event_cb</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-connection-pool-check-event.returns" role="returns">
<title>Returns</title>
<para> The number of handled events, or a negative value if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-global-event-handler" role="function">
<title>prelude_connection_pool_set_global_event_handler&#160;()</title>
<indexterm zone="prelude-connection-pool-set-global-event-handler"><primary>prelude_connection_pool_set_global_event_handler</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_set_global_event_handler
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-pool-event-t"><type>prelude_connection_pool_event_t</type></link> wanted_events</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> (*callback) (prelude_connection_pool_t *pool, prelude_connection_pool_event_t events)</parameter>);</programlisting>
<para><parameter>callback</parameter>
 will be called each time one of the event specified in
<parameter>wanted_events</parameter>
 happen to <parameter>pool</parameter>
. However, contrary to
<link linkend="prelude-connection-pool-set-event-handler"><function>prelude_connection_pool_set_event_handler()</function></link>, the callback will be called
only once per set of event.</para>
<refsect3 id="prelude-connection-pool-set-global-event-handler.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>wanted_events</para></entry>
<entry role="parameter_description"><para>Event the user want to be notified about.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>User specific callback to call when an event is available.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-set-event-handler" role="function">
<title>prelude_connection_pool_set_event_handler&#160;()</title>
<indexterm zone="prelude-connection-pool-set-event-handler"><primary>prelude_connection_pool_set_event_handler</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_connection_pool_set_event_handler
                               (<parameter><link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> *pool</parameter>,
                                <parameter><link linkend="prelude-connection-pool-event-t"><type>prelude_connection_pool_event_t</type></link> wanted_events</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> (*callback) (prelude_connection_pool_t *pool, prelude_connection_pool_event_t events, prelude_connection_t *cnx)</parameter>);</programlisting>
<para><parameter>callback</parameter>
 will be called each time one of the event specified in
<parameter>wanted_events</parameter>
 happens to <parameter>pool</parameter>
.</para>
<refsect3 id="prelude-connection-pool-set-event-handler.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pool</para></entry>
<entry role="parameter_description"><para>Pointer to a <link linkend="prelude-connection-pool-t"><type>prelude_connection_pool_t</type></link> object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>wanted_events</para></entry>
<entry role="parameter_description"><para>Event the user want to be notified about.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>User specific callback to call when an event is available.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="libprelude-prelude-connection-pool.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="prelude-connection-pool-flags-t" role="enum">
<title>enum prelude_connection_pool_flags_t</title>
<indexterm zone="prelude-connection-pool-flags-t"><primary>prelude_connection_pool_flags_t</primary></indexterm>
<refsect3 id="prelude-connection-pool-flags-t.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="PRELUDE-CONNECTION-POOL-FLAGS-RECONNECT:CAPS">PRELUDE_CONNECTION_POOL_FLAGS_RECONNECT</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="PRELUDE-CONNECTION-POOL-FLAGS-FAILOVER:CAPS">PRELUDE_CONNECTION_POOL_FLAGS_FAILOVER</para></entry>
<entry /><entry />
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-event-t" role="enum">
<title>enum prelude_connection_pool_event_t</title>
<indexterm zone="prelude-connection-pool-event-t"><primary>prelude_connection_pool_event_t</primary></indexterm>
<refsect3 id="prelude-connection-pool-event-t.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="PRELUDE-CONNECTION-POOL-EVENT-INPUT:CAPS">PRELUDE_CONNECTION_POOL_EVENT_INPUT</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="PRELUDE-CONNECTION-POOL-EVENT-DEAD:CAPS">PRELUDE_CONNECTION_POOL_EVENT_DEAD</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="PRELUDE-CONNECTION-POOL-EVENT-ALIVE:CAPS">PRELUDE_CONNECTION_POOL_EVENT_ALIVE</para></entry>
<entry /><entry />
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-connection-pool-t" role="typedef">
<title>prelude_connection_pool_t</title>
<indexterm zone="prelude-connection-pool-t"><primary>prelude_connection_pool_t</primary></indexterm>
<programlisting language="C">typedef struct prelude_connection_pool prelude_connection_pool_t;
</programlisting>
</refsect2>

</refsect1>

</refentry>
