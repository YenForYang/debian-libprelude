<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="libprelude-prelude-plugin">
<refmeta>
<refentrytitle role="top_of_page" id="libprelude-prelude-plugin.top_of_page">prelude-plugin</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBPRELUDE Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>prelude-plugin</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsect1 id="libprelude-prelude-plugin.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PRELUDE-PLUGIN-SET-PRELOADED-SYMBOLS:CAPS">PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PRELUDE-PLUGIN-OPTION-DECLARE-STRING-CB:CAPS">PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="prelude-plugin-get-name">prelude_plugin_get_name</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="prelude-plugin-set-name">prelude_plugin_set_name</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="prelude-plugin-set-destroy-func">prelude_plugin_set_destroy_func</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-entry-set-plugin">prelude_plugin_entry_set_plugin</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-set-activation-option">prelude_plugin_set_activation_option</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-subscribe">prelude_plugin_instance_subscribe</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-unsubscribe">prelude_plugin_instance_unsubscribe</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-new-instance">prelude_plugin_new_instance</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-search-by-name">prelude_plugin_search_by_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-plugin-instance-t"><returnvalue>prelude_plugin_instance_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-search-instance-by-name">prelude_plugin_search_instance_by_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-set-data">prelude_plugin_instance_set_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-get-data">prelude_plugin_instance_get_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-set-plugin-data">prelude_plugin_instance_set_plugin_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-get-plugin-data">prelude_plugin_instance_get_plugin_data</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-get-name">prelude_plugin_instance_get_name</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-get-plugin">prelude_plugin_instance_get_plugin</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-load-from-dir">prelude_plugin_load_from_dir</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-add">prelude_plugin_instance_add</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-del">prelude_plugin_instance_del</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-compute-time">prelude_plugin_instance_compute_time</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-call-commit-func">prelude_plugin_instance_call_commit_func</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-bool-t"><returnvalue>prelude_bool_t</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-instance-has-commit-func">prelude_plugin_instance_has_commit_func</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-set-preloaded-symbols">prelude_plugin_set_preloaded_symbols</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="prelude-plugin-get-next">prelude_plugin_get_next</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="prelude-plugin-unload">prelude_plugin_unload</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="prelude-plugin-compute-stats">prelude_plugin_compute_stats</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="prelude-plugin-run">prelude_plugin_run</link><phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="libprelude-prelude-plugin.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="lt-preloaded-symbols">lt_preloaded_symbols</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PRELUDE-PLUGIN-API-VERSION:CAPS">PRELUDE_PLUGIN_API_VERSION</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="prelude-plugin-entry-t">prelude_plugin_entry_t</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="prelude-plugin-instance-t">prelude_plugin_instance_t</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="PRELUDE-PLUGIN-GENERIC:CAPS">PRELUDE_PLUGIN_GENERIC</link></entry></row>
<row><entry role="datatype_keyword"></entry><entry role="function_name"><link linkend="prelude-plugin-generic-t">prelude_plugin_generic_t</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="libprelude-prelude-plugin.description" role="desc">
<title role="desc.title">Description</title>

</refsect1>
<refsect1 id="libprelude-prelude-plugin.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="PRELUDE-PLUGIN-SET-PRELOADED-SYMBOLS:CAPS" role="macro">
<title>PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS</title>
<indexterm zone="PRELUDE-PLUGIN-SET-PRELOADED-SYMBOLS:CAPS"><primary>PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS</primary></indexterm>
<programlisting language="C">#define             PRELUDE_PLUGIN_SET_PRELOADED_SYMBOLS()</programlisting>
</refsect2>
<refsect2 id="PRELUDE-PLUGIN-OPTION-DECLARE-STRING-CB:CAPS" role="macro">
<title>PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB()</title>
<indexterm zone="PRELUDE-PLUGIN-OPTION-DECLARE-STRING-CB:CAPS"><primary>PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB</primary></indexterm>
<programlisting language="C">#define             PRELUDE_PLUGIN_OPTION_DECLARE_STRING_CB(prefix, type, name)</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-get-name" role="macro">
<title>prelude_plugin_get_name()</title>
<indexterm zone="prelude-plugin-get-name"><primary>prelude_plugin_get_name</primary></indexterm>
<programlisting language="C">#define prelude_plugin_get_name(p) (p)-&gt;name
</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-set-name" role="macro">
<title>prelude_plugin_set_name()</title>
<indexterm zone="prelude-plugin-set-name"><primary>prelude_plugin_set_name</primary></indexterm>
<programlisting language="C">#define prelude_plugin_set_name(p, str) (p)-&gt;name = (str)
</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-set-destroy-func" role="macro">
<title>prelude_plugin_set_destroy_func()</title>
<indexterm zone="prelude-plugin-set-destroy-func"><primary>prelude_plugin_set_destroy_func</primary></indexterm>
<programlisting language="C">#define prelude_plugin_set_destroy_func(p, func) (p)-&gt;destroy = func
</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-entry-set-plugin" role="function">
<title>prelude_plugin_entry_set_plugin&#160;()</title>
<indexterm zone="prelude-plugin-entry-set-plugin"><primary>prelude_plugin_entry_set_plugin</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_entry_set_plugin (<parameter><link linkend="prelude-plugin-entry-t"><type>prelude_plugin_entry_t</type></link> *pe</parameter>,
                                 <parameter><link linkend="prelude-plugin-generic-t"><type>prelude_plugin_generic_t</type></link> *pl</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-set-activation-option" role="function">
<title>prelude_plugin_set_activation_option&#160;()</title>
<indexterm zone="prelude-plugin-set-activation-option"><primary>prelude_plugin_set_activation_option</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_set_activation_option (<parameter><link linkend="prelude-plugin-entry-t"><type>prelude_plugin_entry_t</type></link> *pe</parameter>,
                                      <parameter><link linkend="prelude-option-t"><type>prelude_option_t</type></link> *opt</parameter>,
                                      <parameter><link linkend="int"><type>int</type></link> (*commit) (prelude_plugin_instance_t *pi, prelude_string_t *err)</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-subscribe" role="function">
<title>prelude_plugin_instance_subscribe&#160;()</title>
<indexterm zone="prelude-plugin-instance-subscribe"><primary>prelude_plugin_instance_subscribe</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_instance_subscribe (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-unsubscribe" role="function">
<title>prelude_plugin_instance_unsubscribe&#160;()</title>
<indexterm zone="prelude-plugin-instance-unsubscribe"><primary>prelude_plugin_instance_unsubscribe</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_instance_unsubscribe (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
<para>Set <parameter>pi</parameter>
 to be inactive.</para>
<para>The unsubscribe function specified in <link linkend="plugin-load-from-dir"><function>plugin_load_from_dir()</function></link>
is called for plugin un-registration and the instance for this
plugin is freed.</para>
<refsect3 id="prelude-plugin-instance-unsubscribe.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pi</para></entry>
<entry role="parameter_description"><para>Pointer to a plugin instance.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-plugin-instance-unsubscribe.returns" role="returns">
<title>Returns</title>
<para> 0 on success, -1 if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-plugin-new-instance" role="function">
<title>prelude_plugin_new_instance&#160;()</title>
<indexterm zone="prelude-plugin-new-instance"><primary>prelude_plugin_new_instance</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_new_instance (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> **pi</parameter>,
                             <parameter><link linkend="prelude-plugin-generic-t"><type>prelude_plugin_generic_t</type></link> *plugin</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                             <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-search-by-name" role="function">
<title>prelude_plugin_search_by_name&#160;()</title>
<indexterm zone="prelude-plugin-search-by-name"><primary>prelude_plugin_search_by_name</primary></indexterm>
<programlisting language="C"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
prelude_plugin_search_by_name (<parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> *head</parameter>,
                               <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>Search <parameter>head</parameter>
 list of plugin for a plugin with name <parameter>name</parameter>
.</para>
<refsect3 id="prelude-plugin-search-by-name.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>head</para></entry>
<entry role="parameter_description"><para>List where to search the plugin from.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>Name of the plugin to search.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-plugin-search-by-name.returns" role="returns">
<title>Returns</title>
<para> the a <link linkend="prelude-plugin-t"><type>prelude_plugin_t</type></link> on success, or NULL if the plugin does not exist.</para>
</refsect3></refsect2>
<refsect2 id="prelude-plugin-search-instance-by-name" role="function">
<title>prelude_plugin_search_instance_by_name&#160;()</title>
<indexterm zone="prelude-plugin-search-instance-by-name"><primary>prelude_plugin_search_instance_by_name</primary></indexterm>
<programlisting language="C"><link linkend="prelude-plugin-instance-t"><returnvalue>prelude_plugin_instance_t</returnvalue></link>&#160;*
prelude_plugin_search_instance_by_name
                               (<parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> *head</parameter>,
                                <parameter>const <link linkend="char"><type>char</type></link> *pname</parameter>,
                                <parameter>const <link linkend="char"><type>char</type></link> *iname</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-set-data" role="function">
<title>prelude_plugin_instance_set_data&#160;()</title>
<indexterm zone="prelude-plugin-instance-set-data"><primary>prelude_plugin_instance_set_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_instance_set_data (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>,
                                  <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-get-data" role="function">
<title>prelude_plugin_instance_get_data&#160;()</title>
<indexterm zone="prelude-plugin-instance-get-data"><primary>prelude_plugin_instance_get_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
prelude_plugin_instance_get_data (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-set-plugin-data" role="function">
<title>prelude_plugin_instance_set_plugin_data&#160;()</title>
<indexterm zone="prelude-plugin-instance-set-plugin-data"><primary>prelude_plugin_instance_set_plugin_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_instance_set_plugin_data
                               (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>,
                                <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-get-plugin-data" role="function">
<title>prelude_plugin_instance_get_plugin_data&#160;()</title>
<indexterm zone="prelude-plugin-instance-get-plugin-data"><primary>prelude_plugin_instance_get_plugin_data</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>&#160;*
prelude_plugin_instance_get_plugin_data
                               (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-get-name" role="function">
<title>prelude_plugin_instance_get_name&#160;()</title>
<indexterm zone="prelude-plugin-instance-get-name"><primary>prelude_plugin_instance_get_name</primary></indexterm>
<programlisting language="C">const <link linkend="char"><returnvalue>char</returnvalue></link>&#160;*
prelude_plugin_instance_get_name (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-get-plugin" role="function">
<title>prelude_plugin_instance_get_plugin&#160;()</title>
<indexterm zone="prelude-plugin-instance-get-plugin"><primary>prelude_plugin_instance_get_plugin</primary></indexterm>
<programlisting language="C"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
prelude_plugin_instance_get_plugin (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-load-from-dir" role="function">
<title>prelude_plugin_load_from_dir&#160;()</title>
<indexterm zone="prelude-plugin-load-from-dir"><primary>prelude_plugin_load_from_dir</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_load_from_dir (<parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> *head</parameter>,
                              <parameter>const <link linkend="char"><type>char</type></link> *dirname</parameter>,
                              <parameter>const <link linkend="char"><type>char</type></link> *symbol</parameter>,
                              <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>,
                              <parameter><link linkend="int"><type>int</type></link> (*subscribe) (prelude_plugin_instance_t *p)</parameter>,
                              <parameter><link linkend="void"><type>void</type></link> (*unsubscribe) (prelude_plugin_instance_t *pi)</parameter>);</programlisting>
<para>Load all plugins in directory 'dirname', using <parameter>symbol</parameter>
 entry point.
Each plugin have a <parameter>subscribe</parameter>
 and <parameter>unsubscribe</parameter>
 callback associated with it.</para>
<para>The plugins are loaded, but not active, until someone call <link linkend="prelude-plugin-subscribe"><function>prelude_plugin_subscribe()</function></link>
on one of the plugin. Which'll call <parameter>subscribe</parameter>
 in order to register it.</para>
<para><parameter>ptr</parameter>
 is an extra argument provided to the plugin at initialization time.</para>
<refsect3 id="prelude-plugin-load-from-dir.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>head</para></entry>
<entry role="parameter_description"><para>List where the loaded plugin should be added.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dirname</para></entry>
<entry role="parameter_description"><para>The directory to load the plugin from.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>symbol</para></entry>
<entry role="parameter_description"><para>Symbol to lookup within loaded plugin.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ptr</para></entry>
<entry role="parameter_description"><para>Extra pointer to provide to the plugin initialization function.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>subscribe</para></entry>
<entry role="parameter_description"><para>Pointer to a callback function for plugin subscribtion.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>unsubscribe</para></entry>
<entry role="parameter_description"><para>Pointer to a callback function for plugin un-subscribtion.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-plugin-load-from-dir.returns" role="returns">
<title>Returns</title>
<para> The number of loaded plugins on success, -1 on error.</para>
</refsect3></refsect2>
<refsect2 id="prelude-plugin-instance-add" role="function">
<title>prelude_plugin_instance_add&#160;()</title>
<indexterm zone="prelude-plugin-instance-add"><primary>prelude_plugin_instance_add</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_instance_add (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>,
                             <parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> *h</parameter>);</programlisting>
<para>This function add the plugin instance associated with <parameter>pi</parameter>
 to the linked list
specified by <parameter>h</parameter>
. If this instance is already used somewhere else, a copy is
made, since instance does not share information).</para>
<refsect3 id="prelude-plugin-instance-add.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pi</para></entry>
<entry role="parameter_description"><para>Pointer to a plugin instance</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>h</para></entry>
<entry role="parameter_description"><para>Pointer to a linked list</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="prelude-plugin-instance-add.returns" role="returns">
<title>Returns</title>
<para> 0 on success or -1 if an error occured.</para>
</refsect3></refsect2>
<refsect2 id="prelude-plugin-instance-del" role="function">
<title>prelude_plugin_instance_del&#160;()</title>
<indexterm zone="prelude-plugin-instance-del"><primary>prelude_plugin_instance_del</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_instance_del (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
<para>Delete <parameter>pi</parameter>
 from the list specified at <link linkend="prelude-plugin-instance-add"><function>prelude_plugin_instance_add()</function></link> time.</para>
<refsect3 id="prelude-plugin-instance-del.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>pi</para></entry>
<entry role="parameter_description"><para>Pointer to a plugin instance.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="prelude-plugin-instance-compute-time" role="function">
<title>prelude_plugin_instance_compute_time&#160;()</title>
<indexterm zone="prelude-plugin-instance-compute-time"><primary>prelude_plugin_instance_compute_time</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_instance_compute_time (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>,
                                      <parameter><type>struct timeval</type> *start</parameter>,
                                      <parameter><type>struct timeval</type> *end</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-call-commit-func" role="function">
<title>prelude_plugin_instance_call_commit_func&#160;()</title>
<indexterm zone="prelude-plugin-instance-call-commit-func"><primary>prelude_plugin_instance_call_commit_func</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
prelude_plugin_instance_call_commit_func
                               (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>,
                                <parameter><link linkend="prelude-string-t"><type>prelude_string_t</type></link> *err</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-has-commit-func" role="function">
<title>prelude_plugin_instance_has_commit_func&#160;()</title>
<indexterm zone="prelude-plugin-instance-has-commit-func"><primary>prelude_plugin_instance_has_commit_func</primary></indexterm>
<programlisting language="C"><link linkend="prelude-bool-t"><returnvalue>prelude_bool_t</returnvalue></link>
prelude_plugin_instance_has_commit_func
                               (<parameter><link linkend="prelude-plugin-instance-t"><type>prelude_plugin_instance_t</type></link> *pi</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-set-preloaded-symbols" role="function">
<title>prelude_plugin_set_preloaded_symbols&#160;()</title>
<indexterm zone="prelude-plugin-set-preloaded-symbols"><primary>prelude_plugin_set_preloaded_symbols</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_set_preloaded_symbols (<parameter><link linkend="void"><type>void</type></link> *symlist</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-get-next" role="function">
<title>prelude_plugin_get_next&#160;()</title>
<indexterm zone="prelude-plugin-get-next"><primary>prelude_plugin_get_next</primary></indexterm>
<programlisting language="C"><link linkend="prelude-plugin-generic-t"><returnvalue>prelude_plugin_generic_t</returnvalue></link>&#160;*
prelude_plugin_get_next (<parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> *head</parameter>,
                         <parameter><link linkend="prelude-list-t"><type>prelude_list_t</type></link> **iter</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-unload" role="function">
<title>prelude_plugin_unload&#160;()</title>
<indexterm zone="prelude-plugin-unload"><primary>prelude_plugin_unload</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
prelude_plugin_unload (<parameter><link linkend="prelude-plugin-generic-t"><type>prelude_plugin_generic_t</type></link> *plugin</parameter>);</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-compute-stats" role="macro">
<title>prelude_plugin_compute_stats()</title>
<indexterm zone="prelude-plugin-compute-stats"><primary>prelude_plugin_compute_stats</primary></indexterm>
<programlisting language="C">#define             prelude_plugin_compute_stats(pi, func)</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-run" role="macro">
<title>prelude_plugin_run()</title>
<indexterm zone="prelude-plugin-run"><primary>prelude_plugin_run</primary></indexterm>
<programlisting language="C">#define             prelude_plugin_run(pi, type, member, ...)</programlisting>
</refsect2>

</refsect1>
<refsect1 id="libprelude-prelude-plugin.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="lt-preloaded-symbols" role="macro">
<title>lt_preloaded_symbols</title>
<indexterm zone="lt-preloaded-symbols"><primary>lt_preloaded_symbols</primary></indexterm>
<programlisting language="C"># define lt_preloaded_symbols lt__PROGRAM__LTX_preloaded_symbols
</programlisting>
</refsect2>
<refsect2 id="PRELUDE-PLUGIN-API-VERSION:CAPS" role="macro">
<title>PRELUDE_PLUGIN_API_VERSION</title>
<indexterm zone="PRELUDE-PLUGIN-API-VERSION:CAPS"><primary>PRELUDE_PLUGIN_API_VERSION</primary></indexterm>
<programlisting language="C">#define PRELUDE_PLUGIN_API_VERSION 1
</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-entry-t" role="typedef">
<title>prelude_plugin_entry_t</title>
<indexterm zone="prelude-plugin-entry-t"><primary>prelude_plugin_entry_t</primary></indexterm>
<programlisting language="C">typedef struct prelude_plugin_entry prelude_plugin_entry_t;
</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-instance-t" role="typedef">
<title>prelude_plugin_instance_t</title>
<indexterm zone="prelude-plugin-instance-t"><primary>prelude_plugin_instance_t</primary></indexterm>
<programlisting language="C">typedef struct prelude_plugin_instance prelude_plugin_instance_t;
</programlisting>
</refsect2>
<refsect2 id="PRELUDE-PLUGIN-GENERIC:CAPS" role="macro">
<title>PRELUDE_PLUGIN_GENERIC</title>
<indexterm zone="PRELUDE-PLUGIN-GENERIC:CAPS"><primary>PRELUDE_PLUGIN_GENERIC</primary></indexterm>
<programlisting language="C">#define             PRELUDE_PLUGIN_GENERIC</programlisting>
</refsect2>
<refsect2 id="prelude-plugin-generic-t" role="struct">
<title>prelude_plugin_generic_t</title>
<indexterm zone="prelude-plugin-generic-t"><primary>prelude_plugin_generic_t</primary></indexterm>
<programlisting language="C">typedef struct {
        PRELUDE_PLUGIN_GENERIC;
} prelude_plugin_generic_t;
</programlisting>
</refsect2>

</refsect1>

</refentry>
